name: check_code

on:
  push:
    # triggered on tag pushes with tags beginning with either "v" or "dev"
    branch-ignore:
      - '*'
    tags:
      - 'v*'
      - 'dev*'
      - 'ci*'
  pull_request:
    # also triggered by pull requests on the "dev" branch
    branches:
      - 'dev'

jobs:


  # ----------------------- #
  # Check source formatting #
  # ----------------------- #
  check-formatting:
    runs-on: ubuntu-20.04
    env:
      CLANG_FORMAT: clang-format-11
    steps:
    - uses: actions/checkout@v2
    - name: Install latest clang-format
      run: |
        sudo apt update
        sudo apt install -y $CLANG_FORMAT
    - name: Use clang-format to detect formatting issues
      run: |
        git ls-files | grep -E "\.cpp$|\.cxx$|\.h$|\.hpp$" | xargs $CLANG_FORMAT -n -Werror


  # ------------- #
  # Code lint job #
  # ------------- #
  lint-code:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: Check line endings (Unix rather than DOS)
      run: |
        ! git ls-files | xargs file "{}" ";" | grep CRLF

    - name: Check files not ending with a newline [NOT ENFORCED]
      run: |
        for f in $(git ls-files | grep -Ev 'png$|ico$' ); do
          test $(tail -c 1 $f | wc -l) -eq 0 && echo $f || true
        done

    - name: Check non-standard C++ file extensions [NOT ENFORCED]
      run: |
        git ls-files | grep -E "\.cxx$|\.cc$|\.hpp$|\.hxx$|\.txx$|\.tpp$|\.inl$" || true

    - name: Check for files containing Unicode characters [NOT ENFORCED]
      run: |
        git ls-files | xargs file | grep Unicode || true

    - name: Check for empty files
      run: |
        ! git ls-files | xargs file | grep empty

    - name: Install Ubuntu dependencies
      run: |
        sudo apt update
        # TTK dependencies
        sudo apt install -y \
          libboost-system-dev \
          libeigen3-dev \
          libgraphviz-dev \
          libsqlite3-dev \
          graphviz \
          python3-sklearn \
          zlib1g-dev \
          clang-tidy

    - uses: dsaltares/fetch-gh-release-asset@master
      with:
        repo: "topology-tool-kit/ttk-paraview"
        version: "tags/v5.8.1"
        file: "ttk-paraview-ubuntu-20.04.deb"

    - name: Install ParaView .deb
      run: |
        sudo apt install ./ttk-paraview-ubuntu-20.04.deb

    - name: Create & configure TTK build directory
      run: |
        mkdir build
        cd build
        cmake \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE \
          -DTTK_BUILD_PARAVIEW_PLUGINS=TRUE \
          -DTTK_BUILD_VTK_WRAPPERS=TRUE \
          -DTTK_BUILD_STANDALONE_APPS=TRUE \
          -DTTK_ENABLE_OPENMP=FALSE \
          $GITHUB_WORKSPACE

    - name: Use clang-tidy to lint code [NOT ENFORCED]
      run: |
        git ls-files \
        | grep core \
        | grep -E "\.cpp$|\.cxx$" \
        | xargs -n1 clang-tidy -p build


  # ----------------------- #
  # Check compiler warnings #
  # ----------------------- #
  check-warnings:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        kamikaze: [KAMIKAZE=TRUE, KAMIKAZE=FALSE]
        omp: [OPENMP=TRUE, OPENMP=FALSE]
        simplexId: [64BIT_IDS=TRUE, 64BIT_IDS=FALSE]
    steps:
    - uses: actions/checkout@v2

    - name: Install Ubuntu dependencies
      run: |
        sudo apt update
        # TTK dependencies
        sudo apt install -y \
          libboost-system-dev \
          libeigen3-dev \
          libgraphviz-dev \
          libsqlite3-dev \
          graphviz \
          python3-sklearn \
          zlib1g-dev \
          clang-tools

    - uses: dsaltares/fetch-gh-release-asset@master
      with:
        repo: "topology-tool-kit/ttk-paraview"
        version: "tags/v5.8.1"
        file: "ttk-paraview-ubuntu-20.04.deb"

    - name: Install ParaView .deb
      run: |
        sudo apt install ./ttk-paraview-ubuntu-20.04.deb

    - name: Create & configure TTK build directory
      run: |
        mkdir build
        cd build
        cmake \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE \
          -DTTK_BUILD_PARAVIEW_PLUGINS=TRUE \
          -DTTK_BUILD_VTK_WRAPPERS=TRUE \
          -DTTK_BUILD_STANDALONE_APPS=TRUE \
          -DTTK_ENABLE_${{ matrix.kamikaze }} \
          -DTTK_ENABLE_${{ matrix.omp }} \
          -DTTK_ENABLE_${{ matrix.simplexId }} \
          $GITHUB_WORKSPACE

    - name: Use clang-check for compiler warnings
      run: |
        git ls-files \
        | grep core \
        | grep -E "\.cpp$|\.cxx$" \
        | xargs clang-check -p build --extra-arg=-Werror
